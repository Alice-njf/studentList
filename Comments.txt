step 1. Delete .git folder manually present in your frontend folder.
step 2. type "git rm --cached YourFrontendFolderName" in cmd
step 3. type "git add YourFrontendFolderName" in cmd
step 4. type "git push " in cmd
------------------
Docker: Install postgress running on docker:
<plugin>
	<groupId>com.google.cloud.tools</groupId>
	<artifactId>jib-maven-plugin</artifactId>
	<version>2.5.2</version>
	<configuration>
		<from>
			<image>openjdk:17</image>
		</from>
		<container>
			<ports>
				<port>8080</port>
			</ports>
			<format>OCI</format>
		</container>
	</configuration>
</plugin>
--
If -Djib.to.image=fullstack:v1 does not work try -Dimage=fullstack:v1

Mac
- ./mvnw compile jib:dockerBuild -Djib.to.image=fullstack:v1 or ./mvnw compile jib:dockerBuild -Dimage=fullstack:v1
- ./mvnw clean install jib:dockerBuild -Djib.to.image=fullstack:v1 or ./mvnw clean install jib:dockerBuild -Dimage=fullstack:v1


Windows
- mvnw compile jib:dockerBuild -Djib.to.image=fullstack:v1 or mvnw compile jib:dockerBuild -Dimage=fullstack:v1
- mvnw clean install jib:dockerBuild -Djib.to.image=fullstack:v1 or mvnw clean install jib:dockerBuild -Dimage=fullstack:v1

To run container
- docker run --name fullstack -p 8080:8080 fullstack:v1

To delete container with name fullstack
- docker rm -f fullstack 

To view local images run
- docker image ls or docker images

To view running containers
- docker ps 
--
build img docker hub:
Commands used: 
docker login 
sudo ./mvnw clean install jib:build -Djib.to.image=alicenjf/spring-react-fullstack:latest


docker pull docker rm -f id ./mvnw clean install jib:build -Djib.to.image=amigoscode/spring-react-fullstack:latest ./mvnw clean install jib:build -Djib.to.image=amigoscode/spring-react-fullstack:latest -D jib.to.auth.username=amigoscode -Djib.to.auth.password=yourpassword docker pull amigoscode/spring-react-fullstack:latest docker run -p 8080:8080 amigoscode/spring-react-fullstack

after ading profiles in pom.xml
sudo ./mvnw clean install -P build-frontend -P jib-push-to-dockerhub -Dapp.image.tag=2

-- DB ------------------------------------------------------------------------------------------
1 - create a folder to mount /var/lib/postgresql/data
2 - cd into that folder
3 - sudo docker network create db
4-cd studentList-db-data/
5-sudo docker run --name db -p 5432:5432 --network=db -v "$PWD:/var/lib/postgresql/data" -e POSTGRESPASSWORD=password -d postgres:alpine
6-connect postgresql docker to the local dbstorage through db network
  docker run -it --rm --network=db postgres:alpine psql -h db -U postgres


MAC LINUX Users
docker run --name db -p 5432:5432 --network=db -v "$PWD:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres:alpine

WINDOWS Users
docker run --name db -p 5432:5432 --network=db -v "%cd%:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres:alpine

docker run --user 1000 --name db -p 5432:5432 --network=db -v "$PWD:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres:alpine

docker run --user 1000 --name dbb -p 5432:5432 --network=dbb -v "$PWD:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres  

another container:
docker run --user 1000 -it --rm --network=dbb postgres:latest psql -h dbb -U postgres
------------
Properties:

in application.properties:
spring.datasource.url=jdbc:postgresql://localhost:5432/amigoscode
spring.datasource.username=
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

-------
Random data generater:
https://www.mockaroo.com/
--
add PostMapping: new Body/raw/JSON
Test with postman:
    {
        "name": "Alice",
        "gender": "FEMALE",
        "email": "Alice@gmail.com"
    }
----------
add:
		<dependency> 
    		<groupId>org.springframework.boot</groupId> 
    		<artifactId>spring-boot-starter-validation</artifactId> 
		</dependency>
		
Create db in AWS
create another properties-dev and add the AWS db endpoint , username and password
create a new application variable (variable spring.profiles.active = dev) for eclips and run in
in cmd line run:
docker run --user 1000 -it --rm postgres:latest psql -h awseb-e-2wzajwfpmu-stack-awsebrdsdatabase-ifxsmbkqketm.c9zk8h9syyry.eu-central-1.rds.amazonaws.com -U alicenjf -d postgres
it will fail because we are not allowed by sg so:
In AWS add security group to allow us to connect to DB
docker run --user 1000 -it --rm postgres:latest psql -h awseb-e-2wzajwfpmu-stack-awsebrdsdatabase-ifxsmbkqketm.c9zk8h9syyry.eu-central-1.rds.amazonaws.com -U alicenjf -d postgres
it will ask for ur pass: 34UjhG09
now is connected and can modify.

then delete the inbound rule from everywhere
then delete variable spring.profiles.active = dev
-----------
stop frontend and backend
Now we can push a new version to dockerhub and implement in AWS:
go to the app folder
login to docker
sudo ./mvnw clean install -P build-frontend -P jib-push-to-dockerhub -Dapp.image.tag=5

add this to docker_compose.yml:
    environment: 
    	SPRING_PROFILES_ACTIVE: dev
---------------# Test   unit test    #-------------------
go on the file and shift ctrl T

    	
--#####################################################--
---------------# Turn off the server #-------------------
Commands:
Change permission: 
sudo chown -R alice ~/Desktop/JavaProjects/studentList/

Maven CleanInstall:
./mvnw -U clean install
/
Ports:
netstat -nlp | grep 8080
sudo fuser -k 8080/tcp

Git:
git status
git add
git commit -m "comment"
git push -u origin master


Links:
http://localhost:8080/api/v1/student
https://www.mockaroo.com/
http://localhost:3000/
https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.managing.db.html?icmpid=docs_elasticbeanstalk_console
https://hub.docker.com/repository/docker/alicenjf/spring-react-fullstack/general

Docker:
cd ~/Desktop/JavaProjects/student_db/
docker login
docker --user 1000
docker --user 1000 login
sudo usermod -aG docker alice
sudo docker rm -f db
docker stop dbb
docker ps -a
docker run --user 1000 --name dbb -p 5432:5432 --network=dbb -v "$PWD:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres
docker run --user 1000 -it --rm --network=dbb postgres:latest psql -h dbb -U postgres

docker run --user 1000 --name dbb -p 5432:5432 --network=dbb -v "$PWD:/var/lib/postgresql/data" -e POSTGRES_PASSWORD=password -d postgres
docker run --user 1000 -it --rm --network=dbb postgres:latest psql -h dbb -U postgres
sudo ./mvnw clean install -P build-frontend -P jib-push-to-dockerhub -Dapp.image.tag=2
./mvnw --user 1000 clean install -P build-frontend -P jib-push-to-dockerhub -Dapp.image.tag=4

Json:
 {
        "name": "John",
        "gender": "MALE",
        "email": "john@gmail.com"
    }