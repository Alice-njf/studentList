[{"/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/index.js":"1","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/App.js":"2","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/reportWebVitals.js":"3","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/client.js":"4","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/StudentDrawerForm.js":"5","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/Notification.js":"6"},{"size":535,"mtime":1677053672293,"results":"7","hashOfConfig":"8"},{"size":6672,"mtime":1678943977383,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1677053672373,"results":"10","hashOfConfig":"8"},{"size":736,"mtime":1678665602750,"results":"11","hashOfConfig":"8"},{"size":3934,"mtime":1678801996550,"results":"12","hashOfConfig":"8"},{"size":782,"mtime":1678801954553,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"1meb3hn",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/index.js",[],[],[],"/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/App.js",["35","36","37","38","39"],[],"import logo from './images/logo.png';\nimport './App.css';\nimport React from 'react';\nimport {getAllStudents} from './client';\nimport {deleteStudent} from './client';\nimport {useState, useEffect} from 'react';\nimport StudentDrawerForm from './StudentDrawerForm';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Popconfirm } from 'antd';\nimport {errorNotification, successNotification} from \"./Notification\";\nimport { Layout, Menu, Breadcrumb, Table, Spin, Empty, Button, Badge,Tag,\nAvatar,Radio, Image} from 'antd';\nimport {\n    DesktopOutlined,\n    PieChartOutlined,\n    FileOutlined,\n    TeamOutlined,\n    UserOutlined,\n    LoadingOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { SubMenu } = Menu; \nconst TheAvatar = ({name}) => {\n\tlet trim = name.trim();\n\tlet idx = name.indexOf(' ');\n\tif(trim.length === 0) {\n\t\treturn <Avatar icon={<UserOutlined/>}/>\n\t}\n\tconst split = trim.split(\" \");\n\tif (split.length === 1) {\n\t\treturn <Avatar>{name.charAt(0)}</Avatar>\n\t}\n\treturn <Avatar> \n\t\t{`${name.charAt(0)}${name.charAt(idx+1)}`} \n\t</Avatar>\n};\n\nconst removeStudent = (studentId, callback) => {\n    deleteStudent(studentId).then(() => {\n        successNotification( \"Student deleted\", `Student with ${studentId} was deleted`);\n        callback();\n    }).catch(err=>\n    \terr.response.json.then(res=> {\n\t\t\terrorNotification(\n\t\t\t\t\"There is an issue\",\n\t\t\t\t`${res.message} [${res.status}] [${res.error}]`\n\t\t\t);\n\t\t}\n    \t)\n\t\t\n\t);\n}\n\nconst columns = fetchStudents => [\n  {\n    title: '',\n    dataIndex: 'avatar',\n    key: 'avatar',\n    render: (text, student) => \n    \t <TheAvatar name={student.name}/> \n  },\n  {\n    title: 'Id',\n    dataIndex: 'id',\n    key: 'id',\n  },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    key: 'email',\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    key: 'gender',\n  },\n    {\n        title: 'Actions',\n        key: 'actions',\n        render: (text, student) =>\n            <Radio.Group>\n                <Popconfirm\n                    placement='topRight'\n                    title={`Are you sure to delete ${student.name}`}\n                    onConfirm={() => removeStudent(student.id, fetchStudents)}\n                    okText='Yes'\n                    cancelText='No'>\n                    <Radio.Button value=\"small\">Delete</Radio.Button>\n                </Popconfirm>\n                <Radio.Button value=\"small\">Edit</Radio.Button>\n            </Radio.Group>\n    }\n];\nconst antIcon = (\n  <LoadingOutlined\n    style={{\n      fontSize: 24,\n    }}\n    spin\n  />\n);\n\n\nfunction App() {\n\tconst [students, setStudents] = useState ([]);\n\tconst [collapsed, setCollapsed] = useState(false);\n\tconst [fetching, setFetching] = useState(false);\n\tconst [showDrawer, setShowDrawer] = useState(false);\n\tconst [studentCount, setStudentCount] = useState(1);\n\tconst fetchStudents = () => \n\t\tgetAllStudents()\n\t\t.then(res => res.json())\n\t\t.then(data => {\n\t\t\tconsole.log(students);\n\t\t\tsetStudents(data);\n\t\t}).catch(err =>{\n\t\t\tconsole.log(err.response);\n\t\t\terr.response.json().then(data=> {\n\t\t\tconsole.log(data);\n\t\t\terrorNotification(\n\t\t\t\t\"There was an issue\", \n\t\t\t\t`${data.message} [status code:${data.status}] [path:${data.path}] [error:${data.error}]`\n\t\t\t);\n\t\t\t});\n\t\t}).finally(() => setFetching(false));\n\t\t\n\tuseEffect(() => {\n\t\tfetchStudents();\n\t},[]\n\t\t\n\t);\n\t\t\n\tconst renderStudents = () => {\n\t\tif(fetching){\n\t\t\treturn <Spin indicator={antIcon} />\n\t\t}\n\t\tif(students.length <= 0){\n\t\t\treturn <>\n\t\t\t<Empty /> \n\t\t\t<Button onClick={() => setShowDrawer(!showDrawer)}\n\t\t\ttype=\"primary\" shape=\"round\" icon={<PlusOutlined />} size=\"32px\">\n\t\t\t\tAdd new Student\n\t\t\t</Button>\n\t\t\t<StudentDrawerForm\n          \t\tshowDrawer={showDrawer}\n            \tsetShowDrawer={setShowDrawer}\n            \tfetchStudents={fetchStudents}\n          \t/>\n\t\t\t</>\n\t\t}\n\t\treturn <>\n\t\t\t<StudentDrawerForm\n          \t\tshowDrawer={showDrawer}\n            \tsetShowDrawer={setShowDrawer}\n            \tfetchStudents={fetchStudents}\n          \t/>\n\t\t\t<Table \n\t\t\tdataSource={students} \n\t\t\tcolumns={columns(fetchStudents)}\n\t\t\tbordered           \n\t\t\ttitle = {()=> \n\t\t\t\t\t<>\n\t\t\t        \t<small className = \"stNo\" > Number of students </small>\n\t\t\t\t\t\t<Badge count={students.length} className=\"site-badge-count-4\"/>\n\t\t\t     \t\t<br/><br/>\n\t\t\t     \t\t<Button \n\t\t\t     \t\t\tvalue=\"small\"\n\t\t\t\t\t\t\tonClick={() => setShowDrawer(!showDrawer)}\n\t\t\t\t\t\t\ttype=\"primary\" shape=\"round\" icon={<PlusOutlined />} size=\"32px\">\n\t\t\t\t             Add New Student  \n\t\t\t        \t</Button>\n\t\t\t     \t</>\n\t\t\t     }\n\t\t\t     pagination ={{pageSize:50}} \n\t\t\t\t scroll={{y:500}} rowKey = {(student) => student.id}\n\t\t\t/>\n\t\t</>\n\t}\n\t\n  return <Layout style={{ minHeight: '100vh' }}>\n        <Sider collapsible collapsed={collapsed}\n               onCollapse={setCollapsed}>\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\n                    Option 1\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\n                    Option 2\n                </Menu.Item>\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"Student\">\n                    <Menu.Item key=\"3\">Tom</Menu.Item>\n                    <Menu.Item key=\"4\">List</Menu.Item>\n                    <Menu.Item key=\"5\">Alex</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<TeamOutlined />} title=\"Team\">\n                    <Menu.Item key=\"6\">Team 1</Menu.Item>\n                    <Menu.Item key=\"8\">Team 2</Menu.Item>\n                </SubMenu>\n                <Menu.Item key=\"9\" icon={<FileOutlined />}>\n                    Files\n                </Menu.Item>\n            </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n            <Content style={{ margin: '0 16px' }}>\n                <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item>Student</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                </Breadcrumb>\n                <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                    {renderStudents()}\n                </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>\n            <Image \n            width={35}\n            src={logo}\n            />\n            <br/>\n            By Cadence IT\n            </Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default App;\n","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/reportWebVitals.js",[],[],"/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/client.js",[],[],"/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/StudentDrawerForm.js",["40"],[],"import {Drawer, Input, Col, Select, Form, Row, Button} from 'antd';\nimport {addNewStudent } from \"./client.js\";\nimport {useState} from 'react';\nimport React from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Spin } from 'antd';\nimport {successNotification, errorNotification} from \"./Notification\";\n\nconst {Option} = Select;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nfunction StudentDrawerForm({showDrawer, setShowDrawer,fetchStudents}) {\n    const onCLose = () => setShowDrawer(false);\n    const [submitting, setSubmitting] = useState(false);\n\n    const onFinish = values => {\n        //alert(JSON.stringify(values, null, 2));\n        setSubmitting(true);\n        console.log(JSON.stringify(values, null, 2));\n        addNewStudent(values).\n        \tthen(()=> {\n\t        \tconsole.log(\"Student added\");\n\t        \tonCLose();\n\t        \tsuccessNotification(\"Student successfully added\",\n\t        \t\t`${values.name} is added to the system`);\n\t        \tfetchStudents();\n\n\t        }\n\t\t    ).catch(err => {\n\t\t\t\tconsole.log(err);\n\t\t\t\terr.response.json().then(res=>\n\t\t\t\terrorNotification(\n\t\t\t\t\t\"There was an issue\",\n\t\t\t\t\t`${res.message} [${res.status}] [${res.error}]`,\n\t\t\t\t\t\"bottomLeft\"\n\t\t\t\t)\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t})\n\t\t    .finally(()=> {\n\t\t    setSubmitting(false);\n\t\t    }\n\t\t    )\n    };\n\n    const onFinishFailed = errorInfo => {\n        alert(JSON.stringify(errorInfo, null, 2));\n    };\n\n    return <Drawer\n        title=\"Create new student\"\n        width={720}\n        onClose={onCLose}\n        visible={showDrawer}\n        bodyStyle={{paddingBottom: 80}}\n        footer={\n            <div\n                style={{\n                    textAlign: 'right',\n                }}\n            >\n                <Button onClick={onCLose} style={{marginRight: 8}}>\n                    Cancel\n                </Button>\n            </div>\n        }\n    >\n        <Form layout=\"vertical\"\n              onFinishFailed={onFinishFailed}\n              onFinish={onFinish}\n              hideRequiredMark>\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"name\"\n                        label=\"Name\"\n                        rules={[{required: true, message: 'Please enter student name'}]}\n                    >\n                        <Input placeholder=\"Please enter student name\"/>\n                    </Form.Item>\n                </Col>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"email\"\n                        label=\"Email\"\n                        rules={[{required: true, message: 'Please enter student email'}]}\n                    >\n                        <Input placeholder=\"Please enter student email\"/>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"gender\"\n                        label=\"gender\"\n                        rules={[{required: true, message: 'Please select a gender'}]}\n                    >\n                        <Select placeholder=\"Please select a gender\">\n                            <Option value=\"MALE\">MALE</Option>\n                            <Option value=\"FEMALE\">FEMALE</Option>\n                            <Option value=\"OTHER\">OTHER</Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={12}>\n                    <Form.Item >\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n\t\t\t  {submitting && <Spin indicator={antIcon} />}\n\t\t\t</Row>\n        </Form>\n    </Drawer>\n}\n\nexport default StudentDrawerForm;","/home/alice/Desktop/JavaProjects/studentList/src/frontend/src/Notification.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":8,"column":10,"nodeType":"43","messageId":"44","endLine":8,"endColumn":32},{"ruleId":"41","severity":1,"message":"45","line":11,"column":70,"nodeType":"43","messageId":"44","endLine":11,"endColumn":73},{"ruleId":"41","severity":1,"message":"46","line":116,"column":9,"nodeType":"43","messageId":"44","endLine":116,"endColumn":21},{"ruleId":"41","severity":1,"message":"47","line":116,"column":23,"nodeType":"43","messageId":"44","endLine":116,"endColumn":38},{"ruleId":"48","severity":1,"message":"49","line":136,"column":4,"nodeType":"50","endLine":136,"endColumn":6,"suggestions":"51"},{"ruleId":"52","severity":1,"message":"53","line":20,"column":30,"nodeType":"54","messageId":"55","endLine":20,"endColumn":31,"fix":"56"},"no-unused-vars","'QuestionCircleOutlined' is defined but never used.","Identifier","unusedVar","'Tag' is defined but never used.","'studentCount' is assigned a value but never used.","'setStudentCount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStudents'. Either include it or remove the dependency array.","ArrayExpression",["57"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"58","text":"59"},{"desc":"60","fix":"61"},[791,802],"\n        \t.","Update the dependencies array to be: [fetchStudents]",{"range":"62","text":"63"},[3424,3426],"[fetchStudents]"]